package services

import (
	"encoding/json"
	"fmt"
	"github.com/go-co-op/gocron/v2"
	"github.com/iarsham/price-tracker/configs"
	"github.com/iarsham/price-tracker/internal/entities"
	"github.com/iarsham/price-tracker/internal/helpers"
	ptime "github.com/yaa110/go-persian-calendar"
	"go.uber.org/zap"
	"gopkg.in/telebot.v4"
	"io"
	"net/http"
	"time"
)

const ApiURL string = "https://brsapi.ir/FreeTsetmcBourseApi/Api_Free_Gold_Currency_v2.json"

type TrackerService struct {
	Client     *http.Client
	Bot        *telebot.Bot
	BackGround gocron.Scheduler
	Logger     *zap.Logger
	Cfg        *configs.Config
}

func (t *TrackerService) Run() {
	_, err := t.BackGround.NewJob(
		gocron.DurationJob(
			time.Hour,
		),
		gocron.NewTask(func() {
			t.scrapeTgju()
		}),
		gocron.WithName(
			"Scrape Prices",
		),
	)
	if err != nil {
		t.Logger.Fatal("Failed to create background price for scrapers.", zap.Error(err))
	}
}

func (t *TrackerService) scrapeTgju() {
	defer func() {
		if err := recover(); err != nil {
			t.Logger.Error("Failed to scrape tgju", zap.Any("error", err))
		}
	}()
	var data entities.PriceData
	req, err := http.NewRequest(http.MethodGet, ApiURL, nil)
	if err != nil {
		t.Logger.Error("Failed to read api data", zap.Error(err))
	}
	resp, err := t.Client.Do(req)
	if err != nil {
		t.Logger.Error("Failed to get api response", zap.Error(err))
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		t.Logger.Error("Failed to read response body", zap.Error(err))
	}
	if err := json.Unmarshal(body, &data); err != nil {
		t.Logger.Error("Failed to unmarshal api data", zap.Error(err))
	}
	extractedItems := make(map[string]string)
	for _, item := range data.Gold {
		extractedItems[item.Symbol] = helpers.ThousandSeparator(fmt.Sprintf("%.2f", item.Price))
	}
	for _, item := range data.Currency {
		extractedItems[item.Symbol] = helpers.ThousandSeparator(fmt.Sprintf("%.2f", item.Price))
	}
	for _, item := range data.Cryptocurrency {
		extractedItems[item.Symbol] = helpers.ThousandSeparator(fmt.Sprintf("%.2f", item.Price))
	}
	fmt.Println(extractedItems)
	fmt.Println(extractedItems["IMCOIN"])
	pt := ptime.Now()
	outPut := fmt.Sprintf(`ðŸ“Š Ù„ÛŒØ³Øª Ù‚ÛŒÙ…Øªâ€ŒÙ‡Ø§:
ðŸ•’ Ø²Ù…Ø§Ù† Ø¨Ù‡â€ŒØ±ÙˆØ²Ø±Ø³Ø§Ù†ÛŒ: %s 

ðŸŒŸ Ù‚ÛŒÙ…Øªâ€ŒÙ‡Ø§ÛŒ Ø·Ù„Ø§:
ðŸ”¸ Ø³Ú©Ù‡ Ø§Ù…Ø§Ù…ÛŒ : %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ Ø³Ú©Ù‡ Ø¨Ù‡Ø§Ø± Ø¢Ø²Ø§Ø¯ÛŒ : %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ Ø·Ù„Ø§ÛŒ Û±Û¸ Ø¹ÛŒØ§Ø± : %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ Ø±Ø¨Ø¹ Ø³Ú©Ù‡ : %s ØªÙˆÙ…Ù†
ðŸ”¸ Ù†ÛŒÙ… Ø³Ú©Ù‡ : %s ØªÙˆÙ…Ù†

ðŸ’µ Ù‚ÛŒÙ…Øªâ€ŒÙ‡Ø§ÛŒ Ø§Ø±Ø²:
ðŸ”¸ Ø¯Ù„Ø§Ø± (USD): %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ ÛŒÙˆØ±Ùˆ (EUR): %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ Ù¾ÙˆÙ†Ø¯ Ø§Ù†Ú¯Ù„ÛŒØ³ (GBP): %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ Ù„ÛŒØ± ØªØ±Ú©ÛŒÙ‡ (TRY): %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ ÛŒÙˆØ§Ù† Ú†ÛŒÙ† (CNY): %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ Ø¯ÛŒÙ†Ø§Ø± Ø¹Ø±Ø§Ù‚  (IQD): %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ Ø±ÙˆØ¨Ù„ Ø±ÙˆØ³ÛŒÙ‡ (RUB): %s ØªÙˆÙ…Ø§Ù†
ðŸ”¸ Ø±ÙˆÙ¾ÛŒÙ‡ Ù‡Ù†Ø¯ (INR): %s ØªÙˆÙ…Ø§Ù†

ðŸ’¹ Ù‚ÛŒÙ…Øªâ€ŒÙ‡Ø§ÛŒ Ø§Ø±Ø² Ø¯ÛŒØ¬ÛŒØªØ§Ù„:
ðŸ”¸ Ø¨ÛŒØª Ú©ÙˆÛŒÙ† (BTC): %s Ø¯Ù„Ø§Ø±
ðŸ”¸ Ø§ØªØ±ÛŒÙˆÙ… (ETH): %s Ø¯Ù„Ø§Ø±
ðŸ”¸ Ù„Ø§ÛŒØª Ú©ÙˆÛŒÙ† (LTC): %s Ø¯Ù„Ø§Ø±
ðŸ”¸ Ø±ÛŒÙ¾Ù„ (XRP): %s Ø¯Ù„Ø§Ø±


ðŸ“¢ Ú©Ø§Ù†Ø§Ù„ Ù…Ø§: @price_hourly`,
		pt.Format("yyyy/MM/dd E hh:mm:ss a"),
		extractedItems["IMCOIN"],
		extractedItems["BACOIN"],
		extractedItems["Gold18"],
		extractedItems["QUCOIN"],
		extractedItems["HACOIN"],
		extractedItems["USD"],
		extractedItems["EUR"],
		extractedItems["GBP"],
		extractedItems["TRY"],
		extractedItems["CNY"],
		extractedItems["IQD"],
		extractedItems["RUB"],
		extractedItems["INR"],
		extractedItems["BTC"],
		extractedItems["ETH"],
		extractedItems["LTC"],
		extractedItems["XRP"],
	)
	if _, err := t.Bot.Send(&telebot.Chat{ID: t.Cfg.App.ChannelID}, outPut); err != nil {
		t.Logger.Error("Failed to send info to channel", zap.Error(err))
	}
}
